import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;


public class HashMapTest {
    
    static class MockHashObject {
        private final int hashCode;

        public MockHashObject(int hashCode) { 
            this.hashCode = hashCode; 
        }

        @Override
        public int hashCode() { 
            return hashCode; 
        }
    }
    
    Object obj1;
    Object obj2;
    Object obj3;
    Object nullObj;
    HashMap<Object, Object> testMap;
    
    @Before
    public void test() {
        obj1 = new MockHashObject(1);
        obj2 = new MockHashObject(1);
        obj3 = new MockHashObject(3);
        nullObj = null;
        testMap = new HashMap<>();
    }
    
    @Test
    public void testGet() {
        testMap.put(obj1, "1");
        testMap.put(obj3, "3");
        assertEquals("3", testMap.get(obj3));
        assertEquals("1", testMap.get(obj1));
        testMap.put(nullObj, "null");
        assertEquals("null", testMap.get(nullObj));
    }
    
    @Test
    public void testGetOnNonExistentKey() {
        assertNull(testMap.get(obj1));
        assertNull(testMap.get(nullObj));
    }
    
    @Test
    public void testContains() {
        testMap.put(obj1, "1");
        assertTrue(testMap.containsKey(obj1));
        assertFalse(testMap.containsKey(obj3));
    }
    
    @Test
    public void testContainsNullKey() {
        testMap.put(nullObj, "null");
        assertTrue(testMap.containsKey(nullObj));
    }
    
    @Test
    public void testPut() {
        testMap.put(obj1, "1");
        testMap.put(obj3, "3");
        assertEquals(2, testMap.size());
        testMap.put(obj3, "New Key");
        assertEquals(2, testMap.size());
    }
    
    @Test
    public void testPutNullObj() {
        testMap.put(nullObj, "null");
        assertEquals(1, testMap.size());
        assertTrue(testMap.containsKey(nullObj));
    }
}
